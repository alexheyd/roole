#!/usr/bin/env node

var path = require('path');
var fs = require('fs-extra');
var program = require('commander');
var chokidar = require('chokidar');
var roole = require('..');
var ver = require('../package.json').version;
var cwd = process.cwd();
var watcher;

program
	.version(ver, '-v, --version')
	.usage('[options] [file|dir ...]')
	.option('-s, --stdout', 'Output compiled CSS to stdout')
	.option('-o, --out <dir>', 'Write compiled files to <dir>')
	.option('-w, --watch', 'Watch files and re-compile if changed')
	.option('-f, --force', 'Create files even when compile to empty string')
	.option('    --prefixes <names>', 'comma-separated vendor names to use for prefixing')
	.option('    --indent <str>', 'Indentation string to use in CSS')
	.option('    --precision <num>', 'Max number of decimal digits to use in CSS', parseInt)
	.option('    --skip-prefixed', 'Not generate prefixed rule that already exists')
	.parse(process.argv);

program.errorContextIndent = '    ';
if (program.out) program.out = path.resolve(program.out);

if (!program.args.length) {
	getStdin(function (data) {
		program.filename = process.cwd() + '/';
		if (!program.out) program.out = cwd;

		roole.compile(data, program, function (err, css) {
			if (err) exitWithError(err);
			console.log(css);
		});
	});
	return;
}

program.args.forEach(function (arg) {
	compile(path.resolve(arg));
});

function getStdin(cb) {
	var data = '';
	process.stdin.resume();
	process.stdin.setEncoding('utf8');
	process.stdin.on('data', function(chunk) { data += chunk; });
	process.stdin.on('end', function(){
		cb(data);
	});
}

function compile(filename, root) {
	fs.stat(filename, function (err, stats) {
		if (err) throw err;

		if (stats.isFile(filename)) {
			// skip files not ending in .roo when compiling a dir
			if (root && path.extname(filename) !== '.roo') return;
			return compileFile(filename, root);
		}
		if (!stats.isDirectory()) return;

		var dirname = filename;
		fs.readdir(dirname, function (err, filenames) {
			if (err) throw err;

			filenames.forEach(function (filename) {
				filename = path.resolve(dirname, filename);
				compile(filename, root || dirname);
			});
		});
	});
}

function compileFile(filename, root) {
	var outname;
	if (program.out) {
		if (root) {
			var relative = path.relative(root, filename);
			outname = path.resolve(program.out, relative);
		} else {
			var basename = path.basename(filename);
			outname =  path.resolve(program.out, basename);
		}
	} else {
		outname = filename;
	}

	if (path.extname(outname) !== '.roo') outname += '.css';
	else outname = outname.replace(/\.roo$/, '.css');

	compileFileTo(filename, outname, program.watch);
}

function compileFileTo(filename, outname) {
	fs.readFile(filename, 'utf8', function (err, data) {
		if (err) throw err;

		var opts = Object.create(program);
		opts.filename = filename;
		opts.out = path.dirname(outname);

		roole.compile(data, opts, function (err, css) {
			if (err) {
				displayError(err);
				if (program.watch) return;
				process.exit(1);
			}

			if (program.stdout) {
				if (css) console.log(css);
				return;
			}

			if (!css && !program.force) {
				filename = path.relative(cwd, filename);
				var msg = program.watch
					? '  %s compiled to empty string, not writing to file'
					: 'INFO: %s compiled to empty string, not writing to file';

				console.log(msg, filename);
				return;
			}

			if (css) css += '\n';
			fs.outputFile(outname, css, function (err) {
				if (err) throw err;

				if (!program.watch) return;

				var imports = Object.keys(opts.imports);
				watchFile(filename, imports, outname);
			});
		});
	});
}

function watchFile(filename, imports, outname) {
	if (watcher) {
		var msg = '  compiled %s to %s';
		filename = path.relative(cwd, filename);
		outname = path.relative(cwd, outname);
		console.log('  compiled %s to %s', filename, outname);

		watcher.add(imports);
		return;
	}

	var filenames = imports.concat(filename);
	watcher = chokidar.watch(filenames, { persistent: true });
	watcher.on('change', function () {
		compileFileTo(filename, outname);
	});

	filename = path.relative(cwd, filename);
	console.log('  watching %s', filename);
}

function displayError(err) {
	if (!err.loc) {
		console.err(err.toString());
		return;
	}

	console.error(err.loc.filename + ':' + err.loc.line + ':' + err.loc.column + '\n');
	console.error(err.toString() + '\n');
	console.error(err.context);
}